package curriculumdesign.cd4;

import java.util.ArrayDeque;
import java.util.Vector;

public class Despath {
	private Vector<ArrayDeque> queues = new Vector<ArrayDeque>();
	private int[] cputime = new int[9];

	public void showAllQueue(){
		for(int i = 7; i >=0 ; i--){
			for(PCB pcb: (PCB[])queues.get(i).toArray()){
				System.out.print(pcb+" ");
			}
			System.out.println();
		}
	}
	public Despath() {
		for (int i = 0; i <= 8; i++) {
			ArrayDeque<PCB> queue = new ArrayDeque<PCB>();
			queues.add(queue);
		}
		cputime[8] = 25;
		for (int i = 7; i >= 0; i--) {
			cputime[i] = cputime[8] * 2;
		}
	}

	public void entryQueue(PCB pcb) {
		queues.get(pcb.getPriority()).addLast(pcb);
	}

	public void despathProcess() {
		for (int i = 7; i > 0; i--) {
			while (!queues.get(i).isEmpty()) {
				PCB pcb = (PCB) queues.get(i).getFirst();
				queues.get(i).removeFirst();
				System.out.println(pcb.getPid());
				pcb.setTimeneed(pcb.getTimeneed() - cputime[i]);
				if (pcb.getTimeneed() > 0) {
					queues.get(i + 1).addLast(pcb);
				}
			}
		}
		while (!queues.get(0).isEmpty()) {
			PCB pcb = (PCB) queues.get(0).getFirst();
			queues.get(0).removeFirst();
			System.out.println(pcb.getPid());
			pcb.setTimeneed(pcb.getTimeneed() - cputime[0]);
			if (pcb.getTimeneed() > 0) {
				queues.get(0).addLast(pcb);
			}
		}
	}
}
